# healco lite (v2)
# –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç –ø–æ –¢–ó
# –¢–µ—Ö—Å—Ç–µ–∫: Python 3.11+, python-telegram-bot==21.6 (async), openai>=1.30.0, python-dotenv>=1.0.1, replit (DB), (–æ–ø—Ü.) aiohttp –¥–ª—è /health
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN, OPENAI_API_KEY
# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ApplicationBuilder().concurrent_updates(True), polling —Å drop_pending_updates=True
# –•—Ä–∞–Ω–∏–ª–∏—â–µ: Replit DB (–∫–ª—é—á–∏ user:<id>), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π JSON-—Ñ–æ–ª–±—ç–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ Replit
# –ê–≤—Ç–æ—Ä: healco lite (v2)

import os
import asyncio
import json
import math
from datetime import datetime
from typing import Dict, Any, List, Optional

from dotenv import load_dotenv
from openai import OpenAI

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

try:
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –¢–ó
    from replit import db as replit_db
    HAS_REPLIT = True
except Exception:
    HAS_REPLIT = False

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------

PROJECT_NAME = "healco lite (v2)"
MODEL_NAME = "gpt-4o-mini"  # –æ–¥–∏–Ω –ø—É—Ç—å –∫ LLM –ø–æ –¢–ó
LONG_OP_THINKING = ["–î—É–º–∞—é‚Ä¶", "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶"]

MAIN_MENU = [
    [KeyboardButton("ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥"), KeyboardButton("üèãÔ∏è –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä")],
    [KeyboardButton("üìí –ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏"), KeyboardButton("üèÜ –ú–æ–∏ –±–∞–ª–ª—ã")],
]

NUTRI_MENU = [
    [KeyboardButton("üçΩÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é"), KeyboardButton("üìè –ò–ú–¢ (BMI)")],
    [KeyboardButton("üìä –ö–ë–ñ–£"), KeyboardButton("üçè –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è")],
    [KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]

TRAINER_MENU = [
    [KeyboardButton("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), KeyboardButton("üìè –ò–ú–¢ (BMI)")],
    [KeyboardButton("ü´Å –ú–ü–ö (VO2max)"), KeyboardButton("üìà –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã")],
    [KeyboardButton("üí™ –î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"), KeyboardButton("üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
    [KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]

LOCATION_KB = [[KeyboardButton("–î–æ–º"), KeyboardButton("–ó–∞–ª"), KeyboardButton("–£–ª–∏—Ü–∞")]]

ACTIVITY_KB = [[KeyboardButton("–ù–∏–∑–∫–∞—è"), KeyboardButton("–£–º–µ—Ä–µ–Ω–Ω–∞—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è")]]
GOAL_KB = [[KeyboardButton("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É"), KeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")]]
GENDER_KB = [[KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton("–ú—É–∂—Å–∫–æ–π")]]

# ---------- –õ–æ–∫–∞–ª—å–Ω—ã–π JSON-—Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ Replit DB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ----------
class LocalDB:
    def __init__(self, path="db.json"):
        self.path = path
        if not os.path.exists(self.path):
            with open(self.path, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=2)
        self._load()

    def _load(self):
        try:
            with open(self.path, "r", encoding="utf-8") as f:
                self.store = json.load(f)
        except Exception:
            self.store = {}

    def _save(self):
        with open(self.path, "w", encoding="utf-8") as f:
            json.dump(self.store, f, ensure_ascii=False, indent=2)

    def __getitem__(self, key):
        return self.store[key]

    def __setitem__(self, key, value):
        self.store[key] = value
        self._save()

    def __contains__(self, key):
        return key in self.store

    def keys(self):
        return list(self.store.keys())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π DB-–æ–±—ä–µ–∫—Ç
local_db = LocalDB(os.environ.get("HLITE_DB_PATH", "db.json"))

def db_get(key: str, default=None):
    if HAS_REPLIT:
        try:
            return replit_db.get(key, default)
        except Exception:
            # –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–æ–ª–±—ç–∫
            return local_db.store.get(key, default)
    else:
        return local_db.store.get(key, default)

def db_set(key: str, value):
    if HAS_REPLIT:
        try:
            replit_db[key] = value
            return
        except Exception:
            pass
    local_db[key] = value

def db_keys_prefix(prefix: str) -> List[str]:
    if HAS_REPLIT:
        try:
            return [k for k in replit_db.keys() if str(k).startswith(prefix)]
        except Exception:
            # —Ñ–æ–ª–±—ç–∫
            return [k for k in local_db.keys() if str(k).startswith(prefix)]
    else:
        return [k for k in local_db.keys() if str(k).startswith(prefix)]

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------

def default_state() -> Dict[str, Any]:
    return {
        "profile": {
            "gender": None,  # "–ñ–µ–Ω—Å–∫–∏–π"/"–ú—É–∂—Å–∫–æ–π"
            "age": None,     # int
            "height_cm": None, # int
            "weight_kg": None, # float
            "activity": None,  # "–ù–∏–∑–∫–∞—è"/"–£–º–µ—Ä–µ–Ω–Ω–∞—è"/"–í—ã—Å–æ–∫–∞—è"
            "goal": None,      # "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É"/"–ü–æ—Ö—É–¥–µ—Ç—å"/"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"
        },
        "diaries": {
            "food": [],
            "train": [],
            "metrics": [],
        },
        "points": 0,
        "current_role": None,  # "nutri" / "trainer" / None
        "awaiting": None,      # —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–∂–∏–¥–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "tmp": {}              # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä. —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω)
    }

def state_key(user_id: int) -> str:
    return f"user:{user_id}"

def load_state(user_id: int) -> Dict[str, Any]:
    key = state_key(user_id)
    st = db_get(key)
    if not st:
        st = default_state()
        db_set(key, st)
    return st

def save_state(user_id: int, st: Dict[str, Any]):
    key = state_key(user_id)
    db_set(key, st)

def add_points(user_id: int, amount: int, reason: str = "") -> int:
    st = load_state(user_id)
    st["points"] = int(st.get("points", 0)) + int(amount)
    save_state(user_id, st)
    return st["points"]

def top10() -> List[Dict[str, Any]]:
    users = []
    for k in db_keys_prefix("user:"):
        st = db_get(k, {})
        if isinstance(st, dict):
            pts = int(st.get("points", 0))
            uid = k.split(":", 1)[-1]
            users.append({"user_id": uid, "points": pts})
    users.sort(key=lambda x: x["points"], reverse=True)
    return users[:10]

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def role_keyboard(role: Optional[str] = None) -> ReplyKeyboardMarkup:
    if role == "nutri":
        return ReplyKeyboardMarkup(NUTRI_MENU, resize_keyboard=True)
    elif role == "trainer":
        return ReplyKeyboardMarkup(TRAINER_MENU, resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)

def now_ts() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def profile_complete(profile: Dict[str, Any]) -> bool:
    return all([
        profile.get("gender") in ("–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"),
        isinstance(profile.get("age"), int) and 10 <= profile["age"] <= 100,
        isinstance(profile.get("height_cm"), int) and 100 <= profile["height_cm"] <= 250,
        (isinstance(profile.get("weight_kg"), (int, float)) and 30 <= float(profile["weight_kg"]) <= 300),
        profile.get("activity") in ("–ù–∏–∑–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"),
        profile.get("goal") in ("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"),
    ])

def activity_multiplier(activity: str) -> float:
    return {"–ù–∏–∑–∫–∞—è": 1.2, "–£–º–µ—Ä–µ–Ω–Ω–∞—è": 1.55, "–í—ã—Å–æ–∫–∞—è": 1.725}.get(activity, 1.2)

# ---------- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ----------

def calc_bmi(weight_kg: float, height_cm: int):
    h_m = height_cm / 100.0
    bmi = weight_kg / (h_m * h_m)
    if bmi < 18.5:
        cat = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
    elif bmi < 25:
        cat = "–ù–æ—Ä–º–∞"
    elif bmi < 30:
        cat = "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞"
    else:
        cat = "–û–∂–∏—Ä–µ–Ω–∏–µ"
    return round(bmi, 1), cat

def mifflin_st_jeor(gender: str, age: int, height_cm: int, weight_kg: float) -> float:
    if gender == "–ú—É–∂—Å–∫–æ–π":
        return 10 * weight_kg + 6.25 * height_cm - 5 * age + 5
    else:
        return 10 * weight_kg + 6.25 * height_cm - 5 * age - 161

def calc_kbju(profile: Dict[str, Any]) -> Dict[str, Any]:
    gender = profile["gender"]
    age = profile["age"]
    height_cm = profile["height_cm"]
    weight_kg = float(profile["weight_kg"])
    goal = profile["goal"]
    act_mult = activity_multiplier(profile["activity"])

    bmr = mifflin_st_jeor(gender, age, height_cm, weight_kg)
    tdee = bmr * act_mult

    goal_mult = {"–ü–æ—Ö—É–¥–µ—Ç—å": 0.85, "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": 1.10, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": 1.00}[goal]
    target_kcal = tdee * goal_mult

    # –ë–µ–ª–æ–∫
    protein_per_kg = 1.8 if goal == "–ü–æ—Ö—É–¥–µ—Ç—å" else 1.6
    protein_g = protein_per_kg * weight_kg

    # –ñ–∏—Ä (–¥–∏–∞–ø–∞–∑–æ–Ω 0.8‚Äì0.9 –≥/–∫–≥)
    fat_g_low = 0.8 * weight_kg
    fat_g_high = 0.9 * weight_kg
    fat_g_mid = 0.85 * weight_kg  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π

    # –£–≥–ª–µ–≤–æ–¥—ã = –æ—Å—Ç–∞—Ç–æ–∫
    kcal_from_protein = protein_g * 4
    kcal_from_fat = fat_g_mid * 9
    carbs_kcal = max(0.0, target_kcal - (kcal_from_protein + kcal_from_fat))
    carbs_g = carbs_kcal / 4.0

    return {
        "bmr": round(bmr),
        "tdee": round(tdee),
        "target_kcal": round(target_kcal),
        "protein_g": int(round(protein_g)),
        "fat_g_range": (int(round(fat_g_low)), int(round(fat_g_high))),
        "carbs_g": int(round(carbs_g)),
        "why": (
            "Mifflin‚ÄìSt Jeor + –º–Ω–æ–∂–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏; —Ü–µ–ª—å: "
            f"{goal} ‚áí {goal_mult:.2f}√óTDEE. –ë–µ–ª–æ–∫ {protein_per_kg} –≥/–∫–≥ "
            "–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—à—Ü –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–ø–ø–µ—Ç–∏—Ç–∞; –∂–∏—Ä 0.8‚Äì0.9 –≥/–∫–≥ –¥–ª—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞; "
            "—É–≥–ª–µ–≤–æ–¥—ã ‚Äî –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏."
        )
    }

def vo2_category(gender: str, vo2: float) -> str:
    # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è —à–∫–∞–ª–∞ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è)
    if gender == "–ú—É–∂—Å–∫–æ–π":
        if vo2 < 35: return "–ù–∏–∑–∫–∏–π"
        if vo2 < 43: return "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        if vo2 < 51: return "–°—Ä–µ–¥–Ω–∏–π"
        if vo2 < 58: return "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        return "–í—ã—Å–æ–∫–∏–π"
    else:
        if vo2 < 28: return "–ù–∏–∑–∫–∏–π"
        if vo2 < 35: return "–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        if vo2 < 42: return "–°—Ä–µ–¥–Ω–∏–π"
        if vo2 < 49: return "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        return "–í—ã—Å–æ–∫–∏–π"

def pulse_zones(age: int, hr_rest: int = 60) -> Dict[str, tuple]:
    hr_max = 208 - 0.7 * age  # Tanaka
    hrr = hr_max - hr_rest

    def rng(p1, p2):
        lo = int(round(hr_rest + p1 * hrr))
        hi = int(round(hr_rest + p2 * hrr))
        return (min(lo, hi), max(lo, hi))

    return {
        "Z1 ¬´–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ¬ª": rng(0.50, 0.60),
        "Z2 ¬´–∞—ç—Ä–æ–±–Ω–∞—è –±–∞–∑–∞¬ª": rng(0.60, 0.70),
        "Z3 ¬´—Ç–µ–º–ø–æ–≤–∞—è¬ª": rng(0.70, 0.80),
        "Z4 ¬´VO2max¬ª": rng(0.80, 0.90),
        "Z5 ¬´–∞–Ω–∞—ç—Ä–æ–±–Ω–∞—è¬ª": rng(0.90, 1.00),
    }

# ---------- LLM ----------

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

async def ai_chat(role: str, profile: Dict[str, Any], question: str) -> str:
    """
    role: "nutri" | "trainer"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM. –¢–∞–π–º–∞—É—Ç –∏ 1 —Ä–µ—Ç—Ä–∞–π –ø–æ –¢–ó.
    """
    if not client:
        return "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –∫–ª—é—á–∞ API). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é."

    sys_base_gate = (
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ —Ä–æ–ª–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ –ø–∏—Ç–∞–Ω–∏–∏/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö/–∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö ‚Äî "
        "–≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é. "
        "–ù–µ —à—É—Ç–∏ –∏ –Ω–µ —É—Ö–æ–¥–∏ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–µ–º—ã."
    )

    if role == "nutri":
        sys_role = (
            "–ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. " + sys_base_gate + " –§–æ—Ä–º–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ Markdown, "
            "–∏—Å–ø–æ–ª—å–∑—É–π 3‚Äì6 —ç–º–æ–¥–∑–∏. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    else:
        sys_role = (
            "–ò–ò –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. " + sys_base_gate + " –§–æ—Ä–º–∞—Ç: –ø–ª–∞–Ω—ã —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏/–ø–æ–¥—Ö–æ–¥–∞–º–∏/–ø–æ–≤—Ç–æ—Ä–∞–º–∏/–≤—Ä–µ–º–µ–Ω–µ–º, "
            "–¥–æ–±–∞–≤–ª—è–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ —Å–∂–∏–≥–∞–µ–º—ã–º –∫–∫–∞–ª, –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã –≤ —É–¥–∞—Ä–∞—Ö/–º–∏–Ω (–¥–∏–∞–ø–∞–∑–æ–Ω—ã), "
            "–≤–∞—Ä–∏–∞–Ω—Ç—ã ¬´–Ω–æ–≤–∏—á–æ–∫/—Å—Ä–µ–¥–Ω–∏–π¬ª, –∏—Å–ø–æ–ª—å–∑—É–π 3‚Äì6 —ç–º–æ–¥–∑–∏."
        )

    prof_text = (
        f"–ü—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª={profile.get('gender')}, –≤–æ–∑—Ä–∞—Å—Ç={profile.get('age')}, "
        f"—Ä–æ—Å—Ç={profile.get('height_cm')} —Å–º, –≤–µ—Å={profile.get('weight_kg')} –∫–≥, "
        f"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å={profile.get('activity')}, —Ü–µ–ª—å={profile.get('goal')}."
    )

    msgs = [
        {"role": "system", "content": sys_role},
        {"role": "system", "content": prof_text},
        {"role": "user", "content": question.strip()[:4000]},
    ]

    async def _call():
        return client.chat.completions.create(
            model=MODEL_NAME,
            messages=msgs,
            temperature=0.4,
            max_tokens=600,
        )

    for attempt in range(2):
        try:
            comp = await asyncio.wait_for(asyncio.to_thread(_call), timeout=30)
            txt = comp.choices[0].message.content.strip()
            return txt
        except asyncio.TimeoutError:
            if attempt == 0:
                continue
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        except Exception:
            if attempt == 0:
                await asyncio.sleep(1)
                continue
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# ---------- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ----------

def gen_menu_text(profile: Dict[str, Any]) -> str:
    goal = profile.get("goal") or "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"
    act = profile.get("activity") or "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
    kcal_hint = {"–ü–æ—Ö—É–¥–µ—Ç—å": "-15%", "–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "+10%", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å": "‚âàTDEE"}[goal]

    # –î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ë–∞–∑–æ–≤–æ–µ –∏ –ì—É—Ä–º–µ (5 –ø—Ä–∏—ë–º–æ–≤: –∑–∞–≤—Ç—Ä–∞–∫/–ø–µ—Ä–µ–∫—É—Å/–æ–±–µ–¥/–ø–µ—Ä–µ–∫—É—Å/—É–∂–∏–Ω)
    # –û–±—ä—ë–º—ã –∏ –∫–∫–∞–ª –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ.
    text = []
    text.append(f"–í–∞—Ä–∏–∞–Ω—Ç ¬´–ë–∞–∑–æ–≤–æ–µ¬ª ({kcal_hint}, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {act})")
    text.append("–ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞ –Ω–∞ –≤–æ–¥–µ —Å –±–∞–Ω–∞–Ω–æ–º (~300 –≥, ~380 –∫–∫–∞–ª)")
    text.append("–ü–µ—Ä–µ–∫—É—Å: –π–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π (~150 –≥, ~120 –∫–∫–∞–ª)")
    text.append("–û–±–µ–¥: –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞, —Ä–∏—Å, —Å–∞–ª–∞—Ç (~350 –≥, ~520 –∫–∫–∞–ª)")
    text.append("–ü–µ—Ä–µ–∫—É—Å: –æ—Ä–µ—Ö–∏ (~30 –≥, ~180 –∫–∫–∞–ª)")
    text.append("–£–∂–∏–Ω: —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏ –Ω–∞ –ø–∞—Ä—É (~300 –≥, ~400 –∫–∫–∞–ª)")
    text.append("")
    text.append("–í–∞—Ä–∏–∞–Ω—Ç ¬´–ì—É—Ä–º–µ¬ª")
    text.append("–ó–∞–≤—Ç—Ä–∞–∫: –æ–º–ª–µ—Ç —Å —à–ø–∏–Ω–∞—Ç–æ–º –∏ —Å—ã—Ä–æ–º (~250 –≥, ~420 –∫–∫–∞–ª)")
    text.append("–ü–µ—Ä–µ–∫—É—Å: —Ç–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏ (~200 –≥, ~220 –∫–∫–∞–ª)")
    text.append("–û–±–µ–¥: –ª–æ—Å–æ—Å—å, –∫–∏–Ω–æ–∞, –∞–≤–æ–∫–∞–¥–æ-—Å–∞–ª–∞—Ç (~350 –≥, ~600 –∫–∫–∞–ª)")
    text.append("–ü–µ—Ä–µ–∫—É—Å: —Ñ—Ä—É–∫—Ç + –º–∏–Ω–¥–∞–ª—å (~180 –≥, ~200 –∫–∫–∞–ª)")
    text.append("–£–∂–∏–Ω: –≥–æ–≤—è–¥–∏–Ω–∞ —Ç—É—à—ë–Ω–∞—è + –≥—Ä–µ—á–∫–∞ + –æ–≤–æ—â–∏ (~350 –≥, ~560 –∫–∫–∞–ª)")
    text.append("")
    text.append("–ó–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç)")
    return "\n".join(text)

def gen_gym_plan(profile: Dict[str, Any]) -> str:
    age = profile.get("age") or 30
    zones = pulse_zones(age, 60)
    z2 = zones["Z2 ¬´–∞—ç—Ä–æ–±–Ω–∞—è –±–∞–∑–∞¬ª"]
    kcal_week = 1800  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–µ–¥–µ–ª—è

    text = []
    text.append("–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω (–∑–∞–ª)")
    text.append("–ü–Ω: –°–∏–ª—ã (–Ω–æ–≥–∏/—è–≥–æ–¥–∏—Ü—ã) ‚Äî –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π 4√ó6‚Äì8; –∂–∏–º –Ω–æ–≥–∞–º–∏ 3√ó10‚Äì12; —Ä—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ 3√ó8‚Äì10; –ø—Ä–µ—Å—Å 3√ó15‚Äì20")
    text.append("–í—Ç: –ö–∞—Ä–¥–∏–æ ‚Äî –±–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ 30 –º–∏–Ω –≤ Z2")
    text.append("–°—Ä: –°–∏–ª—ã (–≥—Ä—É–¥—å/—Å–ø–∏–Ω–∞) ‚Äî –∂–∏–º –ª—ë–∂–∞ 4√ó6‚Äì8; —Ç—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ 3√ó10‚Äì12; —Ç—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ 3√ó8‚Äì10; –ø–ª–∞–Ω–∫–∞ 3√ó40‚Äì60 —Å–µ–∫")
    text.append("–ß—Ç: –û—Ç–¥—ã—Ö/—Ä–∞—Å—Ç—è–∂–∫–∞ 20 –º–∏–Ω")
    text.append("–ü—Ç: –°–∏–ª—ã (–ø–ª–µ—á–∏/—Ä—É–∫–∏) ‚Äî –∂–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 4√ó8‚Äì10; –ø–æ–¥—ä—ë–º –Ω–∞ –±–∏—Ü–µ–ø—Å 3√ó10‚Äì12; —Ä–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å 3√ó10‚Äì12; –≥–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è 3√ó12‚Äì15")
    text.append("–°–±: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã ‚Äî —ç–ª–ª–∏–ø—Å 25 –º–∏–Ω (3 –º–∏–Ω Z2 / 1 –º–∏–Ω Z4)")
    text.append("–í—Å: –•–æ–¥—å–±–∞ 45‚Äì60 –º–∏–Ω –≤ Z2")
    text.append("")
    text.append(f"–¶–µ–ª–µ–≤—ã–µ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã (—É–¥/–º–∏–Ω): Z2: {z2[0]}‚Äì{z2[1]} (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å).")
    text.append(f"–û—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ —Å–∂–∏–≥–∞–µ–º—ã–º –∫–∫–∞–ª –∑–∞ –Ω–µ–¥–µ–ª—é: ~{kcal_week}.")
    text.append("–í–∞—Ä–∏–∞–Ω—Ç—ã: –Ω–æ–≤–∏—á–æ–∫ ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º –Ω–∞ 25‚Äì30%; —Å—Ä–µ–¥–Ω–∏–π ‚Äî –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ.")
    text.append("")
    text.append("–ö–æ–º–∞–Ω–¥–∞: /workout_done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å. –ó–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç)")
    return "\n".join(text)

def gen_home_or_outdoor_plan(profile: Dict[str, Any], place: str, inventory: str) -> str:
    age = profile.get("age") or 30
    zones = pulse_zones(age, 60)
    z2 = zones["Z2 ¬´–∞—ç—Ä–æ–±–Ω–∞—è –±–∞–∑–∞¬ª"]
    kcal_week = 1500  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–µ–¥–µ–ª—è

    text = []
    text.append(f"–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω ({place.lower()})")
    if place == "–î–æ–º":
        text.append("–ü–Ω: –ö—Ä—É–≥–æ–≤–∞—è (3‚Äì4 –∫—Ä—É–≥–∞) ‚Äî –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 15; –æ—Ç–∂–∏–º–∞–Ω–∏—è 8‚Äì12; —è–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 15; –ø–ª–∞–Ω–∫–∞ 40‚Äì60 —Å–µ–∫; —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 15")
        text.append("–í—Ç: –ö–∞—Ä–¥–∏–æ ‚Äî —à–∞–≥–∏ –¥–æ–º–∞/—Å–∫–∞–∫–∞–ª–∫–∞ 30 –º–∏–Ω –≤ Z2")
        text.append("–°—Ä: –ù–æ–≥–∏/–∫–æ—Ä ‚Äî –≤—ã–ø–∞–¥—ã 3√ó12 –Ω–∞ –Ω–æ–≥—É; –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –ø–ª–∏–µ 3√ó12; —Å—É–ø–µ—Ä–º–µ–Ω 3√ó15; –±–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞ 3√ó30‚Äì45 —Å–µ–∫")
        text.append("–ß—Ç: –†–∞—Å—Ç—è–∂–∫–∞ / –º–æ–±–∏–ª–∏—Ç–∏ 20‚Äì25 –º–∏–Ω")
        text.append("–ü—Ç: –í–µ—Ä—Ö —Ç–µ–ª–∞ ‚Äî –æ—Ç–∂–∏–º–∞–Ω–∏—è 4√ó8‚Äì12; —Ç—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ (—ç–ª–∞—Å—Ç–∏—á–Ω–∞—è –ª–µ–Ω—Ç–∞/–≥–∞–Ω—Ç–µ–ª–∏) 4√ó10‚Äì12; –ø–ª–µ—á–∏ ‚Äî –º–∞—Ö–∏ 3√ó12‚Äì15; –ø—Ä–µ—Å—Å 3√ó15‚Äì20")
        text.append("–°–±: –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 20‚Äì25 –º–∏–Ω (40 —Å–µ–∫ —Ä–∞–±–æ—Ç–∞ / 20 —Å–µ–∫ –æ—Ç–¥—ã—Ö, 10 —Ä–∞—É–Ω–¥–æ–≤)")
        text.append("–í—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–≥—É–ª–∫–∞ 45‚Äì60 –º–∏–Ω –≤ Z2")
    else:
        text.append("–ü–Ω: –ë–µ–≥ 30 –º–∏–Ω –≤ Z2 + 5 —É—Å–∫–æ—Ä–µ–Ω–∏–π –ø–æ 20 —Å–µ–∫")
        text.append("–í—Ç: –û–§–ü ‚Äî –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è/–Ω–∏–∑–∫–∞—è –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∞ 3√ó–º–∞–∫—Å; –æ—Ç–∂–∏–º–∞–Ω–∏—è 3√ó10‚Äì12; –≤—ã–ø–∞–¥—ã 3√ó12 –Ω–∞ –Ω–æ–≥—É; –ø–ª–∞–Ω–∫–∞ 3√ó40‚Äì60 —Å–µ–∫")
        text.append("–°—Ä: –í–µ–ª–æ—Å–∏–ø–µ–¥/—Å–∞–º–æ–∫–∞—Ç 40 –º–∏–Ω –≤ Z2")
        text.append("–ß—Ç: –õ–µ—Å—Ç–Ω–∏—Ü—ã/—Ö–æ–ª–º—ã 8‚Äì10√ó30‚Äì45 —Å–µ–∫ –ø–æ–¥—ä—ë–º—ã (Z3‚ÄìZ4)")
        text.append("–ü—Ç: –°–∏–ª–æ–≤–∞—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º ‚Äî –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 4√ó15; –æ—Ç–∂–∏–º–∞–Ω–∏—è 4√ó10‚Äì12; —Ç—è–≥–∞ —ç—Å–ø–∞–Ω–¥–µ—Ä–∞ 4√ó12; –ø—Ä–µ—Å—Å 3√ó15‚Äì20")
        text.append("–°–±: –î–ª–∏–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞/–ø–æ—Ö–æ–¥ 60‚Äì90 –º–∏–Ω –≤ Z2")
        text.append("–í—Å: –†–∞—Å—Ç—è–∂–∫–∞/–π–æ–≥–∞ 20‚Äì25 –º–∏–Ω")

    if inventory and inventory.strip().lower() != "–Ω–µ—Ç":
        text.append("")
        text.append(f"–£—á–∏—Ç—ã–≤–∞—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory.strip()}")

    text.append("")
    text.append(f"–¶–µ–ª–µ–≤—ã–µ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã (—É–¥/–º–∏–Ω): Z2: {z2[0]}‚Äì{z2[1]} (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å).")
    text.append(f"–û—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ —Å–∂–∏–≥–∞–µ–º—ã–º –∫–∫–∞–ª –∑–∞ –Ω–µ–¥–µ–ª—é: ~{kcal_week}.")
    text.append("–í–∞—Ä–∏–∞–Ω—Ç—ã: –Ω–æ–≤–∏—á–æ–∫ ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º –Ω–∞ 25‚Äì30%; —Å—Ä–µ–¥–Ω–∏–π ‚Äî –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ.")
    text.append("")
    text.append("–ö–æ–º–∞–Ω–¥–∞: /workout_done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å. –ó–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç)")
    return "\n".join(text)

# ---------- –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ----------

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

async def send_long_op(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    try:
        await update.effective_chat.send_message(LONG_OP_THINKING[0])
    except Exception:
        pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    st = load_state(user.id)
    kb = role_keyboard(None)
    greet = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! –≠—Ç–æ {PROJECT_NAME}.\n"
    if not profile_complete(st["profile"]):
        st["awaiting"] = "onb_gender"
        save_state(user.id, st)
        await update.message.reply_text(
            greet + "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True),
        )
        await update.message.reply_text("–ü–æ–ª: –≤—ã–±–µ—Ä–∏ ¬´–ñ–µ–Ω—Å–∫–∏–π¬ª –∏–ª–∏ ¬´–ú—É–∂—Å–∫–æ–π¬ª.")
    else:
        await update.message.reply_text(greet + "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/workout_done <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/health ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (200 OK)\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
    )
    await update.message.reply_text(txt, reply_markup=role_keyboard(None))

async def health_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # (–æ–ø—Ü.) aiohttp –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ health-–ø–∏–Ω–≥–∞
    await update.message.reply_text("200 OK")

async def workout_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    st = load_state(user.id)
    args = context.args
    note = " ".join(args).strip() if args else "(–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)"
    st["diaries"]["train"].append({"ts": now_ts(), "text": note})
    save_state(user.id, st)
    add_points(user.id, 2, "workout_done")
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. +2 –±–∞–ª–ª–∞!")

# ---------- –ê–Ω–∫–µ—Ç–∞ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥) ----------

def ask_next_onboarding(update: Update, st: Dict[str, Any]):
    # –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –∞–Ω–∫–µ—Ç—ã
    pass

async def handle_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]):
    user = update.effective_user
    text = (update.message.text or "").strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥
    step = st.get("awaiting")

    # –ü–æ–ª
    if step == "onb_gender":
        if text not in ("–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ¬´–ñ–µ–Ω—Å–∫–∏–π¬ª –∏–ª–∏ ¬´–ú—É–∂—Å–∫–æ–π¬ª.", reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True))
            return True
        st["profile"]["gender"] = text
        st["awaiting"] = "onb_age"
        save_state(user.id, st)
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç): 10‚Äì100", reply_markup=ReplyKeyboardRemove())
        return True

    # –í–æ–∑—Ä–∞—Å—Ç
    if step == "onb_age":
        try:
            age = int(text)
            if 10 <= age <= 100:
                st["profile"]["age"] = age
                st["awaiting"] = "onb_height"
                save_state(user.id, st)
                await update.message.reply_text("–†–æ—Å—Ç (—Å–º): 100‚Äì250")
            else:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 10‚Äì100.")
            return True
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 34")
            return True

    # –†–æ—Å—Ç
    if step == "onb_height":
        try:
            h = int(text)
            if 100 <= h <= 250:
                st["profile"]["height_cm"] = h
                st["awaiting"] = "onb_weight"
                save_state(user.id, st)
                await update.message.reply_text("–í–µ—Å (–∫–≥): 30‚Äì300")
            else:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 100‚Äì250 —Å–º.")
            return True
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 170")
            return True

    # –í–µ—Å
    if step == "onb_weight":
        try:
            w = float(text.replace(",", "."))
            if 30 <= w <= 300:
                st["profile"]["weight_kg"] = round(w, 1)
                st["awaiting"] = "onb_activity"
                save_state(user.id, st)
                await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", reply_markup=ReplyKeyboardMarkup(ACTIVITY_KB, resize_keyboard=True))
            else:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30‚Äì300 –∫–≥.")
            return True
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 63.5")
            return True

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if step == "onb_activity":
        if text not in ("–ù–∏–∑–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–í—ã—Å–æ–∫–∞—è"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: –ù–∏–∑–∫–∞—è | –£–º–µ—Ä–µ–Ω–Ω–∞—è | –í—ã—Å–æ–∫–∞—è", reply_markup=ReplyKeyboardMarkup(ACTIVITY_KB, resize_keyboard=True))
            return True
        st["profile"]["activity"] = text
        st["awaiting"] = "onb_goal"
        save_state(user.id, st)
        await update.message.reply_text("–¶–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(GOAL_KB, resize_keyboard=True))
        return True

    # –¶–µ–ª—å
    if step == "onb_goal":
        if text not in ("–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É | –ü–æ—Ö—É–¥–µ—Ç—å | –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", reply_markup=ReplyKeyboardMarkup(GOAL_KB, resize_keyboard=True))
            return True
        st["profile"]["goal"] = text
        st["awaiting"] = None
        save_state(user.id, st)
        add_points(user.id, 25, "onboarding")
        # CTA
        msg = (
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. +25 –±–∞–ª–ª–æ–≤!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ —à–∞–≥–∏:\n"
            "‚Ä¢ –ú–∏–Ω–∏-–º–µ–Ω—é –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã (–ò–ú–¢/–ö–ë–ñ–£/VO2/–ó–æ–Ω—ã)\n"
            "‚Ä¢ 15-–º–∏–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–º–∞\n"
            "‚Ä¢ –î–Ω–µ–≤–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ."
        )
        await update.message.reply_text(msg, reply_markup=role_keyboard(None))
        return True

    return False

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–æ–ª–µ–π –∏ –∫–Ω–æ–ø–æ–∫ ----------

async def show_diaries(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]):
    d = st["diaries"]
    food = d["food"][-20:]
    train = d["train"][-20:]
    metrics = d["metrics"][-20:]

    lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:"]
    if food:
        lines.append("\nüçè –ü–∏—Ç–∞–Ω–∏–µ:")
        for x in food:
            if "photo" in x:
                lines.append(f"- {x['ts']}: —Ñ–æ—Ç–æ {x['photo']}")
            else:
                lines.append(f"- {x['ts']}: {x['text']}")
    if train:
        lines.append("\nüí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        for x in train:
            lines.append(f"- {x['ts']}: {x['text']}")
    if metrics:
        lines.append("\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
        for x in metrics:
            t = x.get("type")
            data = x.get("data")
            if t == "zones":
                lines.append(f"- {x['ts']}: –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            elif t == "bmi":
                lines.append(f"- {x['ts']}: BMI={data.get('bmi')} ({data.get('cat')})")
            elif t == "kbju":
                lines.append(f"- {x['ts']}: –ö–ë–ñ–£ —Ç–∞—Ä–≥–µ—Ç={data.get('target_kcal')} –∫–∫–∞–ª")
            elif t == "vo2":
                lines.append(f"- {x['ts']}: VO2max={data.get('vo2')} ({data.get('cat')})")
            else:
                lines.append(f"- {x['ts']}: {t}")
    if len(lines) == 1:
        lines.append("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    await update.message.reply_text("\n".join(lines), reply_markup=role_keyboard(st.get("current_role")))

async def show_points(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any]):
    pts = st.get("points", 0)
    board = top10()
    lines = [f"–í–∞—à–∏ –±–∞–ª–ª—ã: {pts}"]
    if board:
        lines.append("\n–¢–æ–ø-10:")
        for i, u in enumerate(board, start=1):
            mark = "‚Üê –≤—ã" if str(update.effective_user.id) == str(u["user_id"]) else ""
            lines.append(f"{i}. {u['user_id']}: {u['points']} {mark}")
    await update.message.reply_text("\n".join(lines), reply_markup=role_keyboard(st.get("current_role")))

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, st: Dict[str, Any], text: str):
    user = update.effective_user

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "ü•ó –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥":
        st["current_role"] = "nutri"
        st["awaiting"] = None
        save_state(user.id, st)
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥¬ª. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –≤–æ–ø—Ä–æ—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é.", reply_markup=role_keyboard("nutri"))
        return True

    if text == "üèãÔ∏è –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä":
        st["current_role"] = "trainer"
        st["awaiting"] = None
        save_state(user.id, st)
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä¬ª. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.", reply_markup=role_keyboard("trainer"))
        return True

    if text == "üìí –ú–æ–∏ –¥–Ω–µ–≤–Ω–∏–∫–∏":
        await show_diaries(update, context, st)
        return True

    if text == "üèÜ –ú–æ–∏ –±–∞–ª–ª—ã":
        await show_points(update, context, st)
        return True

    # –ù–∞–∑–∞–¥
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        st["current_role"] = None
        st["awaiting"] = None
        st["tmp"] = {}
        save_state(user.id, st)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_keyboard(None))
        return True

    # –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ ‚Äî –∫–Ω–æ–ø–∫–∏
    if st.get("current_role") == "nutri":
        if text == "üçΩÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é":
            await send_long_op(update, context)
            plan = gen_menu_text(st["profile"])
            st["tmp"]["last_menu"] = plan
            save_state(user.id, st)
            add_points(user.id, 5, "menu_gen")
            await update.message.reply_text(plan, reply_markup=role_keyboard("nutri"))
            return True

        if text == "üìè –ò–ú–¢ (BMI)":
            p = st["profile"]
            if not profile_complete(p):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ ¬´üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä.")
                return True
            bmi, cat = calc_bmi(float(p["weight_kg"]), int(p["height_cm"]))
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "bmi", "data": {"bmi": bmi, "cat": cat}})
            save_state(user.id, st)
            add_points(user.id, 2, "bmi")
            await update.message.reply_text(f"BMI: {bmi} ‚Äî {cat}\n–ó–∞–ø–∏—Å–∞–Ω–æ –≤ –º–µ—Ç—Ä–∏–∫–∏. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard("nutri"))
            return True

        if text == "üìä –ö–ë–ñ–£":
            p = st["profile"]
            if not profile_complete(p):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ ¬´üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.")
                return True
            res = calc_kbju(p)
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "kbju", "data": res})
            save_state(user.id, st)
            add_points(user.id, 2, "kbju")
            msg = (
                f"–¶–µ–ª—å: {res['target_kcal']} –∫–∫–∞–ª/—Å—É—Ç\n"
                f"–ë–µ–ª–æ–∫: {res['protein_g']} –≥\n"
                f"–ñ–∏—Ä: {res['fat_g_range'][0]}‚Äì{res['fat_g_range'][1]} –≥\n"
                f"–£–≥–ª–µ–≤–æ–¥—ã: ~{res['carbs_g']} –≥\n"
                f"–ü–æ—á–µ–º—É —Ç–∞–∫: {res['why']}\n"
                "–ó–∞–ø–∏—Å–∞–Ω–æ –≤ –º–µ—Ç—Ä–∏–∫–∏. +2 –±–∞–ª–ª–∞."
            )
            await update.message.reply_text(msg, reply_markup=role_keyboard("nutri"))
            return True

        if text == "üçè –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è":
            st["awaiting"] = "food_diary"
            save_state(user.id, st)
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –µ–¥—ã. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.", reply_markup=role_keyboard("nutri"))
            return True

        if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì":
            st["awaiting"] = "ask_nutri"
            save_state(user.id, st)
            await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é.")
            return True

    # –¢—Ä–µ–Ω–µ—Ä ‚Äî –∫–Ω–æ–ø–∫–∏
    if st.get("current_role") == "trainer":
        if text == "üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
            st["awaiting"] = "workout_location"
            save_state(user.id, st)
            await update.message.reply_text("–ì–¥–µ –±—É–¥–µ—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=ReplyKeyboardMarkup(LOCATION_KB, resize_keyboard=True))
            return True

        if text == "üìè –ò–ú–¢ (BMI)":
            p = st["profile"]
            if not profile_complete(p):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ ¬´üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.")
                return True
            bmi, cat = calc_bmi(float(p["weight_kg"]), int(p["height_cm"]))
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "bmi", "data": {"bmi": bmi, "cat": cat}})
            save_state(user.id, st)
            add_points(user.id, 2, "bmi")
            await update.message.reply_text(f"BMI: {bmi} ‚Äî {cat}\n–ó–∞–ø–∏—Å–∞–Ω–æ –≤ –º–µ—Ç—Ä–∏–∫–∏. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard("trainer"))
            return True

        if text == "ü´Å –ú–ü–ö (VO2max)":
            st["awaiting"] = "vo2_value"
            save_state(user.id, st)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ VO2max (–º–ª/–∫–≥/–º–∏–Ω): —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 42.")
            return True

        if text == "üìà –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã":
            p = st["profile"]
            if not profile_complete(p):
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ ¬´üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.")
                return True
            st["awaiting"] = "zones_hrrest"
            save_state(user.id, st)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å –≤ –ø–æ–∫–æ–µ (—É–¥/–º–∏–Ω). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 60.")
            return True

        if text == "üí™ –î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
            st["awaiting"] = "train_diary"
            save_state(user.id, st)
            await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–æ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.", reply_markup=role_keyboard("trainer"))
            return True

        if text == "üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
            # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            st["awaiting"] = "onb_gender"
            save_state(user.id, st)
            await update.message.reply_text("–û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ª:", reply_markup=ReplyKeyboardMarkup(GENDER_KB, resize_keyboard=True))
            return True

        if text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì":
            st["awaiting"] = "ask_trainer"
            save_state(user.id, st)
            await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–Ω–∞–≥—Ä—É–∑–∫–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.")
            return True

    return False

async def handle_text_or_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    st = load_state(user.id)

    # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –æ—Ç–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
    if st.get("awaiting", "").startswith("onb_"):
        if await handle_onboarding(update, context, st):
            return

    msg = update.message
    text = (msg.text or "").strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫/–º–µ–Ω—é
    if text:
        handled = await handle_buttons(update, context, st, text)
        if handled:
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    awaiting = st.get("awaiting")

    # –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
    if awaiting == "food_diary":
        if msg.photo:
            file_id = msg.photo[-1].file_id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            st["diaries"]["food"].append({"ts": now_ts(), "photo": file_id})
            save_state(user.id, st)
            add_points(user.id, 3, "food_photo")
            await update.message.reply_text("–§–æ—Ç–æ –µ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. +3 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
            return
        elif text:
            st["diaries"]["food"].append({"ts": now_ts(), "text": text})
            save_state(user.id, st)
            add_points(user.id, 2, "food_text")
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
            return
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è.")
            return

    # –î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if awaiting == "train_diary":
        if text:
            st["diaries"]["train"].append({"ts": now_ts(), "text": text})
            save_state(user.id, st)
            add_points(user.id, 2, "train_text")
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
            return
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return

    # VO2max
    if awaiting == "vo2_value":
        try:
            vo2 = float(text.replace(",", "."))
            cat = vo2_category(st["profile"].get("gender") or "–ú—É–∂—Å–∫–æ–π", vo2)
            st["diaries"]["metrics"].append({"ts": now_ts(), "type": "vo2", "data": {"vo2": vo2, "cat": cat}})
            save_state(user.id, st)
            add_points(user.id, 2, "vo2")
            await update.message.reply_text(f"VO2max: {vo2:.1f} ‚Äî {cat}. –ó–∞–ø–∏—Å–∞–Ω–æ. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
            st["awaiting"] = None
            save_state(user.id, st)
            return
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42")
            return

    # –ü—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã
    if awaiting == "zones_hrrest":
        try:
            hrrest = int(text)
        except Exception:
            hrrest = 60
        p = st["profile"]
        z = pulse_zones(int(p["age"]), int(hrrest))
        lines = ["–í–∞—à–∏ –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã:"]
        for name, (lo, hi) in z.items():
            lines.append(f"{name}: {lo}‚Äì{hi} —É–¥/–º–∏–Ω")
        lines.append("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: Z1 –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ; Z2 –±–∞–∑–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å; Z3 —Ç–µ–º–ø; Z4 –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã; Z5 –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø—Ä–∏–Ω—Ç.")
        st["diaries"]["metrics"].append({"ts": now_ts(), "type": "zones", "data": {"hrrest": hrrest, "zones": z}})
        save_state(user.id, st)
        add_points(user.id, 2, "zones")
        await update.message.reply_text("\n".join(lines) + "\n–ó–∞–ø–∏—Å–∞–Ω–æ. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
        st["awaiting"] = None
        save_state(user.id, st)
        return

    # –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –º–µ—Å—Ç–æ
    if awaiting == "workout_location":
        place = text
        if place not in ("–î–æ–º", "–ó–∞–ª", "–£–ª–∏—Ü–∞"):
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –î–æ–º | –ó–∞–ª | –£–ª–∏—Ü–∞", reply_markup=ReplyKeyboardMarkup(LOCATION_KB, resize_keyboard=True))
            return
        st["tmp"]["workout_place"] = place
        if place == "–ó–∞–ª":
            # —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            await send_long_op(update, context)
            plan = gen_gym_plan(st["profile"])
            st["tmp"]["last_workout"] = plan
            st["awaiting"] = "workout_log_confirm"
            save_state(user.id, st)
            add_points(user.id, 5, "workout_plan")
            await update.message.reply_text(plan, reply_markup=role_keyboard("trainer"))
            return
        else:
            st["awaiting"] = "workout_inventory"
            save_state(user.id, st)
            await update.message.reply_text("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—Å—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç—Å–ø–∞–Ω–¥–µ—Ä, –≥–∞–Ω—Ç–µ–ª–∏ 2√ó5 –∫–≥) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª.")
            return

    if awaiting == "workout_inventory":
        inv = text or "–Ω–µ—Ç"
        place = st["tmp"].get("workout_place", "–î–æ–º")
        await send_long_op(update, context)
        plan = gen_home_or_outdoor_plan(st["profile"], place, inv)
        st["tmp"]["last_workout"] = plan
        st["awaiting"] = "workout_log_confirm"
        save_state(user.id, st)
        add_points(user.id, 5, "workout_plan")
        await update.message.reply_text(plan, reply_markup=role_keyboard("trainer"))
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´–ó–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫? (–¥–∞/–Ω–µ—Ç)¬ª
    if st["tmp"].get("last_menu") and text.lower() in ("–¥–∞", "–Ω–µ—Ç"):
        if text.lower() == "–¥–∞":
            st["diaries"]["food"].append({"ts": now_ts(), "text": st["tmp"]["last_menu"]})
            save_state(user.id, st)
            add_points(user.id, 2, "menu_logged")
            await update.message.reply_text("–ú–µ–Ω—é –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
        else:
            await update.message.reply_text("–û–∫, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é.", reply_markup=role_keyboard(st.get("current_role")))
        st["tmp"]["last_menu"] = None
        save_state(user.id, st)
        return

    if st["tmp"].get("last_workout") and text.lower() in ("–¥–∞", "–Ω–µ—Ç"):
        if text.lower() == "–¥–∞":
            st["diaries"]["train"].append({"ts": now_ts(), "text": st["tmp"]["last_workout"]})
            save_state(user.id, st)
            add_points(user.id, 2, "workout_logged")
            await update.message.reply_text("–ü–ª–∞–Ω –∑–∞–ø–∏—Å–∞–Ω –≤ –¥–Ω–µ–≤–Ω–∏–∫. +2 –±–∞–ª–ª–∞.", reply_markup=role_keyboard(st.get("current_role")))
        else:
            await update.message.reply_text("–û–∫, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é.", reply_markup=role_keyboard(st.get("current_role")))
        st["tmp"]["last_workout"] = None
        st["awaiting"] = None
        save_state(user.id, st)
        return

    # –í–æ–ø—Ä–æ—Å—ã –∫ —Ä–æ–ª—è–º
    if st.get("current_role") in ("nutri", "trainer") and text:
        # –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        await send_long_op(update, context)
        answer = await ai_chat(st["current_role"], st["profile"], text)
        await update.message.reply_text(answer, reply_markup=role_keyboard(st.get("current_role")))
        return

    # –û—Ñ—Ñ—Ç–æ–ø –≤–Ω–µ —Ä–æ–ª–∏
    if text:
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: –ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é.",
            reply_markup=role_keyboard(st.get("current_role"))
        )
        return

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞—ë–º –º—è–≥–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        print(f"Exception: {context.error}")
    except Exception:
        pass

async def main():
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
        return

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .concurrent_updates(True)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("health", health_cmd))
    app.add_handler(CommandHandler("workout_done", workout_done))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_text_or_photo))

    app.add_error_handler(error_handler)

    print(f"{PROJECT_NAME} –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
